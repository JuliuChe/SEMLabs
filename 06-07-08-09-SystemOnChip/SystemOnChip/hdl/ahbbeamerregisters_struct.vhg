--
-- VHDL Architecture SystemOnChip.ahbBeamerRegisters.struct
--
-- Created:
--          by - axel.amand.UNKNOWN (WE7860)
--          at - 15:01:22 28.04.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

LIBRARY SystemOnChip;

ARCHITECTURE struct OF ahbBeamerRegisters IS

    -- Architecture declarations
    constant addressBitNb: positive := hAddr'length;
    constant dataBitNb : positive := hWData'length;

    -- Internal signal declarations
    SIGNAL clock              : std_ulogic;
    SIGNAL reset              : std_ulogic;
    SIGNAL addr               : unsigned(addressBitNb-1 DOWNTO 0);
    SIGNAL addrX              : unsigned(patternAddressBitNb-1 DOWNTO 0);
    SIGNAL addrY              : unsigned(patternAddressBitNb-1 DOWNTO 0);
    SIGNAL cntIncrX           : std_ulogic;
    SIGNAL cntIncrY           : std_ulogic;
    SIGNAL dataIn             : std_ulogic_vector(dataBitNb-1 DOWNTO 0);
    SIGNAL dataOut            : std_logic_vector(dataBitNb-1 DOWNTO 0);
    SIGNAL memEnX             : std_ulogic;
    SIGNAL memEnY             : std_ulogic;
    SIGNAL memWrX             : std_ulogic;
    SIGNAL memWrY             : std_ulogic;
    SIGNAL patternSize        : unsigned(patternAddressBitNb-1 DOWNTO 0);
    SIGNAL selControl         : std_ulogic;
    SIGNAL selSpeed           : std_ulogic;
    SIGNAL selX               : std_ulogic;
    SIGNAL selY               : std_ulogic;
    SIGNAL updatePattern      : std_ulogic;
    SIGNAL write              : std_ulogic;
    SIGNAL memDataIn          : std_ulogic_vector(signalBitNb-1 DOWNTO 0);
    SIGNAL run_int            : std_ulogic;
    SIGNAL interpolateLin_int : std_ulogic;


    -- Component Declarations
    COMPONENT blockRAM
    GENERIC (
        addressBitNb : positive := 8;
        dataBitNb    : positive := 16;
        initFileSpec : string   := "ramInit.txt"
    );
    PORT (
        dataIn  : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        dataOut : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        en      : IN     std_ulogic ;
        clock   : IN     std_ulogic ;
        reset   : IN     std_ulogic ;
        write   : IN     std_ulogic ;
        addr    : IN     unsigned (addressBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT blockRAMAddressCounter
    GENERIC (
        addressBitNb : positive := 8
    );
    PORT (
        en          : IN     std_ulogic ;
        clock       : IN     std_ulogic ;
        reset       : IN     std_ulogic ;
        updateMem   : IN     std_ulogic ;
        addr        : OUT    unsigned (addressBitNb-1 DOWNTO 0);
        patternSize : IN     unsigned (addressBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT blockRAMControl
    PORT (
        memWr     : OUT    std_ulogic ;
        sel       : IN     std_ulogic ;
        memEn     : OUT    std_ulogic ;
        update    : IN     std_ulogic ;
        wr        : IN     std_ulogic ;
        cntIncr   : OUT    std_ulogic ;
        newSample : IN     std_ulogic ;
        clock     : IN     std_ulogic ;
        reset     : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT periphAddressDecoder
    GENERIC (
        addressBitNb : positive := 24
    );
    PORT (
        selControl : OUT    std_ulogic ;
        addr       : IN     unsigned (addressBitNb-1 DOWNTO 0);
        selSpeed   : OUT    std_ulogic ;
        selX       : OUT    std_ulogic ;
        selY       : OUT    std_ulogic ;
        selZ       : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT periphControlReg
    GENERIC (
        dataBitNb        : positive := 16;
        patternSizeBitNb : positive := 8
    );
    PORT (
        run               : OUT    std_ulogic ;
        dataIn            : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        updatePattern     : OUT    std_ulogic ;
        dataOut           : OUT    std_logic_vector (dataBitNb-1 DOWNTO 0);
        write             : IN     std_ulogic ;
        en                : IN     std_ulogic ;
        clock             : IN     std_ulogic ;
        reset             : IN     std_ulogic ;
        interpolateLinear : OUT    std_ulogic ;
        patternSize       : OUT    unsigned (patternSizeBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT periphSpeedReg
    GENERIC (
        dataBitNb         : positive := 16;
        updatePeriodBitNb : positive := 16
    );
    PORT (
        updatePeriod : OUT    unsigned (updatePeriodBitNb-1 DOWNTO 0);
        dataIn       : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        dataOut      : OUT    std_logic_vector (dataBitNb-1 DOWNTO 0);
        en           : IN     std_ulogic ;
        clock        : IN     std_ulogic ;
        reset        : IN     std_ulogic ;
        write        : IN     std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : blockRAM USE ENTITY SystemOnChip.blockRAM;
    FOR ALL : blockRAMAddressCounter USE ENTITY SystemOnChip.blockRAMAddressCounter;
    FOR ALL : blockRAMControl USE ENTITY SystemOnChip.blockRAMControl;
    FOR ALL : periphAddressDecoder USE ENTITY SystemOnChip.periphAddressDecoder;
    FOR ALL : periphControlReg USE ENTITY SystemOnChip.periphControlReg;
    FOR ALL : periphSpeedReg USE ENTITY SystemOnChip.periphSpeedReg;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 3 eb3
    testout( 1) <= run_int; run <= run_int;
    testout( 2) <= updatePattern;
    testout( 3) <= interpolateLin_int; interpolateLin <= interpolateLin_int;
    testout( 4) <= newPolynom;
    testout( 5) <= newPolynom;
    testout( 6) <= '0';
    testout( 7) <= '0';
    testout( 8) <= selControl;
    testout( 9) <= selSpeed;
    testout(10) <= selX;
    testout(11) <= selY;
    testout(12) <= '0';
    testout(13) <= addr(0);
    testout(14) <= addr(1);
    testout(15) <= dataIn(0);
    testout(16) <= dataIn(1);

    -- HDL Embedded Text Block 8 eb8
    storeControls: process(reset, clock)
    begin
      if reset = '1' then
        addr <= (others => '0');
        write <= '0';
      elsif rising_edge(clock) then
        write <= '0';
        if (hSel = '1') and (hTrans = transNonSeq) then
          addr <= hAddr(addr'range);
          write <= hWrite;
        end if;
      end if;
    end process storeControls;
    
    dataIn <= hWData;

    -- HDL Embedded Text Block 9 eb9
    memDataIn <= dataIn(memDataIn'range);

    -- HDL Embedded Text Block 10 eb10
    hRData <= std_ulogic_vector(dataOut);
    
    hReady <= '1';  -- no wait state
    hResp  <= '0';  -- data OK

    -- HDL Embedded Text Block 11 eb11
    clock<= hClk;
    
    reset <= not hReset_n;


    -- Instance port mappings.
    I_ramx : blockRAM
        GENERIC MAP (
            addressBitNb => patternAddressBitNb,
            dataBitNb    => signalBitNb,
            initFileSpec => "$SIMULATION_DIR/ramYInit.txt"
        )
        PORT MAP (
            dataIn  => memDataIn,
            dataOut => memX,
            en      => memEnX,
            clock   => clock,
            reset   => reset,
            write   => memWrX,
            addr    => addrX
        );
    I_ramy : blockRAM
        GENERIC MAP (
            addressBitNb => patternAddressBitNb,
            dataBitNb    => signalBitNb,
            initFileSpec => "$SIMULATION_DIR/ramXInit.txt"
        )
        PORT MAP (
            dataIn  => memDataIn,
            dataOut => memY,
            en      => memEnY,
            clock   => clock,
            reset   => reset,
            write   => memWrY,
            addr    => addrY
        );
    I_addrx : blockRAMAddressCounter
        GENERIC MAP (
            addressBitNb => patternAddressBitNb
        )
        PORT MAP (
            en          => cntIncrX,
            clock       => clock,
            reset       => reset,
            updateMem   => updatePattern,
            addr        => addrX,
            patternSize => patternSize
        );
    I_addry : blockRAMAddressCounter
        GENERIC MAP (
            addressBitNb => patternAddressBitNb
        )
        PORT MAP (
            en          => cntIncrY,
            clock       => clock,
            reset       => reset,
            updateMem   => updatePattern,
            addr        => addrY,
            patternSize => patternSize
        );
    I_ctlx : blockRAMControl
        PORT MAP (
            memWr     => memWrX,
            sel       => selX,
            memEn     => memEnX,
            update    => updatePattern,
            wr        => write,
            cntIncr   => cntIncrX,
            newSample => newPolynom,
            clock     => clock,
            reset     => reset
        );
    I_ctly : blockRAMControl
        PORT MAP (
            memWr     => memWrY,
            sel       => selY,
            memEn     => memEnY,
            update    => updatePattern,
            wr        => write,
            cntIncr   => cntIncrY,
            newSample => newPolynom,
            clock     => clock,
            reset     => reset
        );
    I_decoder : periphAddressDecoder
        GENERIC MAP (
            addressBitNb => addressBitNb
        )
        PORT MAP (
            selControl => selControl,
            addr       => addr,
            selSpeed   => selSpeed,
            selX       => selX,
            selY       => selY,
            selZ       => OPEN
        );
    I_ctl : periphControlReg
        GENERIC MAP (
            dataBitNb        => dataBitNb,
            patternSizeBitNb => patternAddressBitNb
        )
        PORT MAP (
            run               => run_int,
            dataIn            => dataIn,
            updatePattern     => updatePattern,
            dataOut           => dataOut,
            write             => write,
            en                => selControl,
            clock             => clock,
            reset             => reset,
            interpolateLinear => interpolateLin_int,
            patternSize       => patternSize
        );
    I_speed : periphSpeedReg
        GENERIC MAP (
            dataBitNb         => dataBitNb,
            updatePeriodBitNb => updatePeriodBitNb
        )
        PORT MAP (
            updatePeriod => updatePeriod,
            dataIn       => dataIn,
            dataOut      => dataOut,
            en           => selSpeed,
            clock        => clock,
            reset        => reset,
            write        => write
        );

END struct;
