--
-- VHDL Architecture SystemOnChip.ahbBeamerOperator.struct
--
-- Created:
--          by - axel.amand.UNKNOWN (WE7860)
--          at - 10:42:24 08.05.2023
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

LIBRARY DigitalToAnalogConverter;
LIBRARY SplineInterpolator;
LIBRARY SystemOnChip;
LIBRARY WaveformGenerator;

ARCHITECTURE struct OF ahbBeamerOperator IS

    -- Architecture declarations
    constant coeffBitNb : positive := signalBitNb+3+1;
    constant sampleCountBitNb : positive := 8;
    constant patternAddressBitNb : positive := 8;
    -- sinewave generator
    constant tableAddressBitNb : positive := 3;
    constant phaseBitNb : positive := sampleCountBitNb + tableAddressBitNb + 2;

    -- Internal signal declarations
    SIGNAL aX                  : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL aY                  : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL bX                  : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL bY                  : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL cX                  : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL cY                  : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL cosine              : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL dX                  : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL dY                  : signed(coeffBitNb-1 DOWNTO 0);
    SIGNAL interpolateLinear   : std_ulogic;
    SIGNAL interpolationEn     : std_ulogic;
    SIGNAL interpolationEnable : std_ulogic;
    SIGNAL phase               : unsigned(phaseBitNb-1 DOWNTO 0);
    SIGNAL sampleX             : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sampleX1            : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sampleX2            : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sampleX3            : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sampleX4            : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sampleY             : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sampleY1            : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sampleY2            : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sampleY3            : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sampleY4            : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL samplesX            : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL samplesY            : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL sine                : signed(signalBitNb-1 DOWNTO 0);
    SIGNAL step                : unsigned(phaseBitNb-1 DOWNTO 0);
    SIGNAL unsignedX           : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL unsignedY           : unsigned(signalBitNb-1 DOWNTO 0);

    -- Implicit buffer signal declarations
    SIGNAL newPolynom_internal : std_ulogic;


    -- Component Declarations
    COMPONENT DAC
    GENERIC (
        signalBitNb : positive := 16
    );
    PORT (
        serialOut  : OUT    std_ulogic ;
        parallelIn : IN     unsigned (signalBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT interpolatorCalculatePolynom
    GENERIC (
        signalBitNb       : positive := 16;
        coeffBitNb        : positive := 16;
        oversamplingBitNb : positive := 8
    );
    PORT (
        clock          : IN     std_ulogic ;
        reset          : IN     std_ulogic ;
        restartPolynom : IN     std_ulogic ;
        d              : IN     signed (coeffBitNb-1 DOWNTO 0);
        sampleOut      : OUT    signed (signalBitNb-1 DOWNTO 0);
        c              : IN     signed (coeffBitNb-1 DOWNTO 0);
        b              : IN     signed (coeffBitNb-1 DOWNTO 0);
        a              : IN     signed (coeffBitNb-1 DOWNTO 0);
        en             : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT interpolatorCoefficients
    GENERIC (
        bitNb      : positive := 16;
        coeffBitNb : positive := 16
    );
    PORT (
        sample1           : IN     signed (bitNb-1 DOWNTO 0);
        sample2           : IN     signed (bitNb-1 DOWNTO 0);
        sample3           : IN     signed (bitNb-1 DOWNTO 0);
        sample4           : IN     signed (bitNb-1 DOWNTO 0);
        a                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        b                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        c                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        d                 : OUT    signed (coeffBitNb-1 DOWNTO 0);
        interpolateLinear : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT interpolatorShiftRegister
    GENERIC (
        signalBitNb : positive := 16
    );
    PORT (
        clock        : IN     std_ulogic ;
        reset        : IN     std_ulogic ;
        shiftSamples : IN     std_ulogic ;
        sampleIn     : IN     signed (signalBitNb-1 DOWNTO 0);
        sample1      : OUT    signed (signalBitNb-1 DOWNTO 0);
        sample2      : OUT    signed (signalBitNb-1 DOWNTO 0);
        sample3      : OUT    signed (signalBitNb-1 DOWNTO 0);
        sample4      : OUT    signed (signalBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT interpolatorTrigger
    GENERIC (
        counterBitNb : positive := 4
    );
    PORT (
        triggerOut : OUT    std_ulogic ;
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        en         : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT offsetToUnsigned
    GENERIC (
        bitNb : positive := 16
    );
    PORT (
        unsignedOut : OUT    unsigned (bitNb-1 DOWNTO 0);
        signedIn    : IN     signed (bitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT periphSpeedController
    GENERIC (
        updatePeriodBitNb : positive := 16
    );
    PORT (
        enableOut    : OUT    std_ulogic ;
        clock        : IN     std_ulogic ;
        reset        : IN     std_ulogic ;
        updatePeriod : IN     unsigned (updatePeriodBitNb-1 DOWNTO 0);
        enableIn     : IN     std_ulogic 
    );
    END COMPONENT;
    COMPONENT sinCosTable
    GENERIC (
        inputBitNb        : positive := 16;
        outputBitNb       : positive := 16;
        tableAddressBitNb : positive := 3
    );
    PORT (
        sine   : OUT    signed (outputBitNb-1 DOWNTO 0);
        phase  : IN     unsigned (inputBitNb-1 DOWNTO 0);
        cosine : OUT    signed (outputBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT sawtoothGen
    GENERIC (
        bitNb : positive := 16
    );
    PORT (
        sawtooth : OUT    unsigned (bitNb-1 DOWNTO 0);
        clock    : IN     std_ulogic ;
        reset    : IN     std_ulogic ;
        step     : IN     unsigned (bitNb-1 DOWNTO 0);
        en       : IN     std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : DAC USE ENTITY DigitalToAnalogConverter.DAC;
    FOR ALL : interpolatorCalculatePolynom USE ENTITY SplineInterpolator.interpolatorCalculatePolynom;
    FOR ALL : interpolatorCoefficients USE ENTITY SplineInterpolator.interpolatorCoefficients;
    FOR ALL : interpolatorShiftRegister USE ENTITY SplineInterpolator.interpolatorShiftRegister;
    FOR ALL : interpolatorTrigger USE ENTITY SplineInterpolator.interpolatorTrigger;
    FOR ALL : offsetToUnsigned USE ENTITY SplineInterpolator.offsetToUnsigned;
    FOR ALL : periphSpeedController USE ENTITY SystemOnChip.periphSpeedController;
    FOR ALL : sawtoothGen USE ENTITY WaveformGenerator.sawtoothGen;
    FOR ALL : sinCosTable USE ENTITY SystemOnChip.sinCosTable;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 1 eb1
    samplesY <= sine when selSinCos = '1'
      else signed(memY);

    -- HDL Embedded Text Block 2 eb2
    samplesX <= cosine when selSinCos = '1'
      else signed(memX);

    -- HDL Embedded Text Block 4 eb4
    step <= to_unsigned(1, step'length);

    -- HDL Embedded Text Block 5 eb5
    interpolationEnable <= '1' when selSinCos = '1'
      else interpolationEn;
    interpolateLinear <= '0' when selSinCos = '1'
      else interpolateLin;
    --interpolateLinear <= interpolateLin;


    -- Instance port mappings.
    I_dacx : DAC
        GENERIC MAP (
            signalBitNb => signalBitNb
        )
        PORT MAP (
            serialOut  => outX,
            parallelIn => unsignedX,
            clock      => clock,
            reset      => reset
        );
    I_dacy : DAC
        GENERIC MAP (
            signalBitNb => signalBitNb
        )
        PORT MAP (
            serialOut  => outY,
            parallelIn => unsignedY,
            clock      => clock,
            reset      => reset
        );
    I_polyx : interpolatorCalculatePolynom
        GENERIC MAP (
            signalBitNb       => signalBitNb,
            coeffBitNb        => coeffBitNb,
            oversamplingBitNb => sampleCountBitNb
        )
        PORT MAP (
            clock          => clock,
            reset          => reset,
            restartPolynom => newPolynom_internal,
            d              => dX,
            sampleOut      => sampleX,
            c              => cX,
            b              => bX,
            a              => aX,
            en             => interpolationEnable
        );
    I_polyy : interpolatorCalculatePolynom
        GENERIC MAP (
            signalBitNb       => signalBitNb,
            coeffBitNb        => coeffBitNb,
            oversamplingBitNb => sampleCountBitNb
        )
        PORT MAP (
            clock          => clock,
            reset          => reset,
            restartPolynom => newPolynom_internal,
            d              => dY,
            sampleOut      => sampleY,
            c              => cY,
            b              => bY,
            a              => aY,
            en             => interpolationEnable
        );
    I_coeffx : interpolatorCoefficients
        GENERIC MAP (
            bitNb      => signalBitNb,
            coeffBitNb => coeffBitNb
        )
        PORT MAP (
            sample1           => sampleX1,
            sample2           => sampleX2,
            sample3           => sampleX3,
            sample4           => sampleX4,
            a                 => aX,
            b                 => bX,
            c                 => cX,
            d                 => dX,
            interpolateLinear => interpolateLinear
        );
    I_coeffy : interpolatorCoefficients
        GENERIC MAP (
            bitNb      => signalBitNb,
            coeffBitNb => coeffBitNb
        )
        PORT MAP (
            sample1           => sampleY1,
            sample2           => sampleY2,
            sample3           => sampleY3,
            sample4           => sampleY4,
            a                 => aY,
            b                 => bY,
            c                 => cY,
            d                 => dY,
            interpolateLinear => interpolateLinear
        );
    I_srx : interpolatorShiftRegister
        GENERIC MAP (
            signalBitNb => signalBitNb
        )
        PORT MAP (
            clock        => clock,
            reset        => reset,
            shiftSamples => newPolynom_internal,
            sampleIn     => samplesX,
            sample1      => sampleX1,
            sample2      => sampleX2,
            sample3      => sampleX3,
            sample4      => sampleX4
        );
    I_sry : interpolatorShiftRegister
        GENERIC MAP (
            signalBitNb => signalBitNb
        )
        PORT MAP (
            clock        => clock,
            reset        => reset,
            shiftSamples => newPolynom_internal,
            sampleIn     => samplesY,
            sample1      => sampleY1,
            sample2      => sampleY2,
            sample3      => sampleY3,
            sample4      => sampleY4
        );
    I_trig : interpolatorTrigger
        GENERIC MAP (
            counterBitNb => sampleCountBitNb
        )
        PORT MAP (
            triggerOut => newPolynom_internal,
            clock      => clock,
            reset      => reset,
            en         => interpolationEnable
        );
    I_offsx : offsetToUnsigned
        GENERIC MAP (
            bitNb => signalBitNb
        )
        PORT MAP (
            unsignedOut => unsignedX,
            signedIn    => sampleX
        );
    I_offsy : offsetToUnsigned
        GENERIC MAP (
            bitNb => signalBitNb
        )
        PORT MAP (
            unsignedOut => unsignedY,
            signedIn    => sampleY
        );
    I_speed : periphSpeedController
        GENERIC MAP (
            updatePeriodBitNb => updatePeriodBitNb
        )
        PORT MAP (
            enableOut    => interpolationEn,
            clock        => clock,
            reset        => reset,
            updatePeriod => updatePeriod,
            enableIn     => run
        );
    I_sin : sinCosTable
        GENERIC MAP (
            inputBitNb        => phaseBitNb,
            outputBitNb       => signalBitNb,
            tableAddressBitNb => tableAddressBitNb
        )
        PORT MAP (
            sine   => sine,
            phase  => phase,
            cosine => cosine
        );
    I_phase : sawtoothGen
        GENERIC MAP (
            bitNb => phaseBitNb
        )
        PORT MAP (
            sawtooth => phase,
            clock    => clock,
            reset    => reset,
            step     => step,
            en       => interpolationEnable
        );

    -- Implicit buffered output assignments
    newPolynom <= newPolynom_internal;

END struct;
